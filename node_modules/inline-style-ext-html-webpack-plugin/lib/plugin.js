"use strict";

/**
 * Inlines styles into html template
 *
 * __author__ = 'Nz'
 */
const path = require('path');
const inlineCss = require('inline-css');

class InlineStyleExtHtmlWebpackPlugin {
    /**
     * @param options inline-css options. See https://www.npmjs.com/package/inline-css#api
     */
    constructor(options) {
        this.options = Object.assign({}, {
            url: '#',
            removeLinkTags: true,
            applyLinkTags: false
        }, options || {});
    }

    apply(compiler) {
        compiler.hooks.compilation.tap('InlineStyleExtHtmlWebpackPlugin', (compilation) => {

            compilation.hooks.htmlWebpackPluginAfterHtmlProcessing.tapAsync('html-webpack-inline-style-plugin',
                (data, cb) => {
                    if (!data.assets.css.length) {
                        console.info(`No styles found for ${data.plugin.options.filename}`);
                        cb(null, data)
                    }
                    const cssName = path.basename(data.assets.css[0]);
                    const css = compilation.assets[cssName].source();
                    const options = Object.assign({}, this.options, {extraCss: css});
                    inlineCss(data.html, options).then(
                        (html) => {
                            data.html = html;
                            cb(null, data);
                        },
                        (e) => {
                            console.error(`Inlining styles to ${data.plugin.options.filename} failed`);
                            cb(e, data)
                        }
                    )
                }
            )

        })
    }
}

module.exports = InlineStyleExtHtmlWebpackPlugin;
