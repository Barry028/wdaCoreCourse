%rounded-corner-defaults {
    border-style: solid;
    border-width: $border-size;
}

@mixin border-before-style($color: $dark, $l: 0.5rem, $t: 0.5625rem) {
    content: '';
    display: block;
    position: absolute;
    background-color: $color;
    left: $l;
    top: $t;
    width: 100%;
    height: 100%;
    z-index: -1;
}

@mixin border-image($color) {
    border-image-source: escape-svg(url('data:image/svg+xml;utf8,<svg version="1.1" width="8" height="8" xmlns="http://www.w3.org/2000/svg"><path d="M3 1 h1 v1 h-1 z M4 1 h1 v1 h-1 z M2 2 h1 v1 h-1 z M5 2 h1 v1 h-1 z M1 3 h1 v1 h-1 z M6 3 h1 v1 h-1 z M1 4 h1 v1 h-1 z M6 4 h1 v1 h-1 z M2 5 h1 v1 h-1 z M5 5 h1 v1 h-1 z M3 6 h1 v1 h-1 z M4 6 h1 v1 h-1 z" fill="rgb(#{red($color)},#{green($color)},#{blue($color)})" /></svg>'));
}

@mixin compact-border-image($color) {
    border-image-source: escape-svg(url('data:image/svg+xml;utf8,<svg version="1.1" width="5" height="5" xmlns="http://www.w3.org/2000/svg"><path d="M2 1 h1 v1 h-1 z M1 2 h1 v1 h-1 z M3 2 h1 v1 h-1 z M2 3 h1 v1 h-1 z" fill="rgb(#{red($color)},#{green($color)},#{blue($color)})" /></svg>'));
}

@mixin border-image-repeat {
    border-image-repeat: stretch;

    // for chrome
    @media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm) {
        border-image-repeat: space;
    }

    // for firefox
    @supports (-moz-appearance: meterbar) {
        border-image-repeat: stretch;
    }
}

// Border image Styles
@mixin rounded-corners($isDark: false) {
    @extend %rounded-corner-defaults;

    border-image-slice: 3;
    border-image-width: 3;

    @include border-image-repeat;

    @if $isDark {
        @include border-image($color-white);

        border-image-outset: 2;
    }
    @else {
        @include border-image($color-black);

        border-image-outset: 2;
    }
}

// Border image Bigger
@mixin compact-rounded-corners($isDark: false) {
    @extend %rounded-corner-defaults;

    border-image-slice: 2;
    border-image-width: 2;

    @include border-image-repeat;

    @if $isDark {
        @include compact-border-image($color-white);

        border-image-outset: 2;
    }
    @else {
        @include compact-border-image($color-black);

        border-image-outset: 2;
    }
}

$opacity-before: 0.66;
$l-before: 0.5rem;
$t-before: 0.5625rem;

// Border image before
@mixin rounded-corners-before($color: currentcolor, $opacity: $opacity-before, $l: $l-before, $t: $t-before) {
    &:before {
        @include border-before-style($color, $l, $t);
        @include opacity($opacity);
        @include rounded-corners;
        @include border-image($color);
    }
}

@mixin compact-rounded-corners-before($color: currentcolor, $opacity: $opacity-before, $l: $l-before, $t: $t-before) {
    &:before {
        @include border-before-style($color, $l, $t);
        @include opacity($opacity);
        @include compact-rounded-corners;
        @include compact-border-image($color);
    }
}

// Clip Path Border
@mixin clip-pixel($bw: 6px, $bc: currentColor) {
    position: relative;
    border-width: $bw;
    border-style: solid;
    border-color: $bc;
    clip-path: polygon(0 $bw, #{$bw / 2} $bw, #{$bw / 2} #{$bw / 2}, $bw #{$bw / 2}, $bw 0, calc(100% - #{$bw}) 0, calc(100% - #{$bw}) #{$bw / 2}, calc(100% - #{$bw / 2}) #{$bw / 2}, calc(100% - #{$bw / 2}) $bw, 100% $bw, 100% calc(100% - #{$bw}), calc(100% - #{$bw / 2}) calc(100% - #{$bw}), calc(100% - #{$bw / 2}) calc(100% - #{$bw / 2}), calc(100% - #{$bw}) calc(100% - #{$bw / 2}), calc(100% - #{$bw}) 100%, $bw 100%, $bw calc(100% - #{$bw / 2}), #{$bw / 2} calc(100% - #{$bw / 2}), #{$bw / 2} calc(100% - #{$bw}), 0 calc(100% - #{$bw}));

    &:before {
        content: "";
        position: absolute;
        right: 0;
        bottom: 0;
        background-color: inherit;
        clip-path: polygon(0 #{$bw / 2}, #{$bw / 2} #{$bw / 2}, #{$bw / 2} 0, calc(100% - #{$bw}) 0, calc(100% - #{$bw}) #{$bw / 2}, 100% #{$bw / 2}, 100% calc(100% - #{$bw / 2}), calc(100% - #{$bw / 2}) calc(100% - #{$bw / 2}), calc(100% - #{$bw / 2}) calc(100% - #{$bw / 2}), calc(100% - #{$bw / 2}) 100%, #{$bw} 100%, #{$bw} calc(100% - #{$bw / 2}), #{$bw / 2} calc(100% - #{$bw / 2}), #{$bw / 2} calc(100% - #{$bw}), 0 calc(100% - #{$bw}));
        border-right: #{$bw / 2} solid $bc;
        border-bottom: #{$bw / 2} solid $bc;
        width: calc(100% + #{$bw});
        height: calc(100% + #{$bw});
        opacity: .88;
    }

    &:after {
        content: "";
        position: absolute;
        right: #{$bw / 2};
        bottom: #{$bw / 2};
        width: #{$bw / 2};
        height: #{$bw / 2};
        opacity: .88;
        background-color: $bc;
    }
}

// No Border
@mixin no-border-pixel($bw: 4px) {
    position: relative;
    border: none;

    &:before,
    &:after {
        content: "";
        position: absolute;
        background-color: inherit;
        height: 100%;
        z-index: -1;
        width: calc(100% - #{$bw * 2});
    }

    &:before {
        bottom: -#{$bw};
        right: #{$bw};
        width: calc(100% - #{$bw * 2});
    }

    &:after {
        top: -#{$bw};
        left: #{$bw};
    }
}

@mixin border-style($border: $dark, $outline: $dark) {
    @include compact-border-image($border);

    &:focus-visible,
    &:focus {
        outline-color: $outline;
    }
}

// 20220711 
// Generate SVG image for pixelated corners
@function pixel-borders-image($corner-size, $color) {
    $svg: "";
    $svg-path: "";
    $svg-size: $corner-size * 6;
    $color: str-replace("" + $color, "#", "%23");

    @if $corner-size == 1 {
        $svg-path: "M0 2h2v2H0zM2 0h2v2H2zM4 2h2v2H4zM2 4h2v2H2z";
    }
    @else {
        $svg-path: "M2 2h2v2H2zM4 0h2v2H4zM10 4h2v2h-2zM0 4h2v2H0zM6 0h2v2H6zM8 2h2v2H8zM8 8h2v2H8zM6 10h2v2H6zM0 6h2v2H0zM10 6h2v2h-2zM4 10h2v2H4zM2 8h2v2H2z";
    }

    $svg: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='#{$svg-size}' height='#{$svg-size}'><path d='#{$svg-path}' fill='#{$color}' /></svg>";

    //#{$color}

    @return $svg;
}

// String replace function - replace `$search` with `$replace` in `$string`
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// Pixel border
@mixin pixel-borders($corner-size: 1, $border-size: 4px, $border-color: $dark, $border-inset-color: false) {
    @supports (border-image-source: none) {
        border-radius: $border-size * ($corner-size + 2) + $corner-size * 2;
    }

    border-style: solid;
    border-width: $border-size;
    border-color: $border-color;
    border-image-slice: $corner-size * 2;
    border-image-width: $corner-size;
    border-image-outset: 0;
    border-image-source: url(pixel-borders-image($corner-size, $border-color));

    @if $border-inset-color {
        @include pixel-inset-border($border-size, $border-inset-color);
    }
}

// Pixel inset border
@mixin pixel-inset-border($border-inset-size: 4px, $border-inset-color: rgba($dark, 0.08), $border-inset-sides: "bottom-right", $border-inset-color-br: false, $border-inset-color-tl: false) {
    $box-shadow: "";

    @if not $border-inset-color-br {
        $border-inset-color-br: $border-inset-color;
    }

    @if not $border-inset-color-tl {
        $border-inset-color-tl: $border-inset-color;
    }

    position: relative;

    &::after {
        content: '';
        position: absolute;
        z-index: 0;
        bottom: 0;
        right: 0;
        width: 100%;
        height: 100%;

        @if $border-inset-sides == "bottom-right" or $border-inset-sides == false {
            $box-shadow: inset -#{$border-inset-size} -#{$border-inset-size} $border-inset-color-br;
        }

        @if $border-inset-sides == "top-left" {
            $box-shadow: inset $border-inset-size $border-inset-size $border-inset-color-tl;
        }

        @if $border-inset-sides == "all" {
            $box-shadow: inset -#{$border-inset-size} -#{$border-inset-size} $border-inset-color-br, inset $border-inset-size $border-inset-size $border-inset-color-tl;
        }

        box-shadow: $box-shadow;
    }
}

// Pixel box - Colours for border and inset are calculated using $background-color unless $border-color is passed
@mixin pixel-box($corner-size, $border-size, $background-color, $border-color: false, $border-inset: true, $border-inset-size: false, $border-inset-color: false, $border-inset-sides: false, $border-inset-color-br: false, $border-inset-color-tl: false) {
    $background-color-hover: darken($background-color, 5);

    @if not $border-color {
        $border-color: darken($background-color, 20);
    }

    @include pixel-borders($corner-size: $corner-size, $border-size: $border-size, $border-color: $border-color);

    @if $border-inset-sides == "all" and not $border-inset-color {
        $border-inset-color-br: darken($background-color, 10);
        $border-inset-color-tl: lighten($background-color, 15);
    }

    @if not $border-inset-color {
        $border-inset-color: darken($background-color, 10);
    }

    @if $border-inset-sides == "top-left" {
        $border-inset-color: lighten($background-color, 15);
    }

    @if $border-inset {
        @include pixel-inset-border($border-inset-size: $border-size, $border-inset-color: $border-inset-color, $border-inset-sides: $border-inset-sides, $border-inset-color-br: $border-inset-color-br, $border-inset-color-tl: $border-inset-color-tl);
    }

    background-color: $background-color;

    &:hover,
    &:focus {
        background-color: $background-color-hover;
    }
}