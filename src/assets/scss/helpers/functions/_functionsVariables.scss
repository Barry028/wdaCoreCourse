@charset "utf-8";

// Prefix for :root CSS variables
$variable-prefix: tu- !default;
$prefix: $variable-prefix !default;
$cssPrefix: $prefix !default;


// _var(primary, accent, bg, #f0f0f0);
@function _var($propertyName: "", $argsFallbacks...) {
  $fallbacksNb: length($argsFallbacks);

  // No fallbacks.
  @if $fallbacksNb < 1 {
    @return var(--#{$prefix}#{$propertyName});
  }

  // Last fallback: it can be a valid CSS value, or `null`.
  $fallbacks: nth($argsFallbacks, $fallbacksNb);

  @if $fallbacksNb > 1 {
    // Last parameter is a valid fallback.
    @if $fallbacks != null {
      $fallbacks: meduzen-wrap-v-fallbacks($argsFallbacks, $fallbacksNb - 1, $fallbacks);
    }
    @else {
      // Last parameter is null: it isnâ€™t a valid fallback, we skip it.
      $fallbacks: var(--#{nth($argsFallbacks, $fallbacksNb - 1)});

      @if $fallbacksNb > 2 {
        $fallbacks: meduzen-wrap-v-fallbacks($argsFallbacks, $fallbacksNb - 2, $fallbacks);
      }
    }
  }

  @return var(--#{$prefix}#{$propertyName}, $fallbacks);
}

@function meduzen-wrap-v-fallbacks($argsFallbacks, $upper-index, $fallbacks) {
  @for $index from $upper-index through 1 {
    $fallbacks: var(--#{$prefix}#{nth($argsFallbacks, $index)}, #{$fallbacks});
  }

  @return $fallbacks;
}

@function v($var, $value) {
  @return var(--#{$prefix}#{$var}, #{$value});
}

@function cssvar($name, $prefix: tu-) {
  @return var(--#{$prefix}#{$name});
}


// @supports(--css: variables) {
// }
// @mixin variable($property, $variable, $fallback) {
//   #{$property}: $fallback;
//   #{$property}: var($variable);
// }
// 
// 
// 
// 
// 
// // @function color($key) {
//   @return map-get($colors, $key);
// }
// @function getColor($colorName, $alpha: 1) {
//   @return rgba(var(--#{$colorName}), $alpha);
// }
// $colors: ('primary': black, 'secondary': white);
// @function color($color) {
//   @return map.get($colors, $color);
// }