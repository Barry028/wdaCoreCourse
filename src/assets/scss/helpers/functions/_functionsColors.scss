@charset "utf-8";

// Foundation for Sites
// https://get.foundation
// Licensed under MIT Open Source
$black: #0f0f0f !default;
$dark: #121328 !default;
$white: #fff !default;
$contrast-color-threshold: 55%;

// $contrast-color-threshold:        80%;
// contrast-color($badge-bg-color, $dark, $white);
@function contrast-color($color, $dark, $white) {
  @return if(lightness($color) < $contrast-color-threshold, $white, $dark);
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if($l1 > $l2, divide($l1 + 0.05, $l2 + 0.05), divide($l2 + 0.05, $l1 + 0.05));
}

// $contrast-warnings: true !default;
// $primary-color: null !default;
// $secondary-color: null !default;
// $warning-color: null !default;
// $alert-color: null !default;
// $success-color: null !default;

@function to-rgb($value) {
  @return red($value), green($value), blue($value);
}

// stylelint-disable scss/dollar-variable-pattern
@function rgba-css-var($identifier, $target) {
  @if $identifier == "body" and $target == "bg" {
    @return rgba(var(--#{$variable-prefix}#{$identifier}-bg-rgb), var(--#{$variable-prefix}#{$target}-opacity));
  }

  @if $identifier == "body" and $target == "text" {
    @return rgba(var(--#{$variable-prefix}#{$identifier}-color-rgb), var(--#{$variable-prefix}#{$target}-opacity));
  }
  @else {
    @return rgba(var(--#{$variable-prefix}#{$identifier}-rgb), var(--#{$variable-prefix}#{$target}-opacity));
  }
}

////
/// @group functions
////

/// Checks the luminance of `$color`.
///
/// @param {Color} $color - Color to check the luminance of.
///
/// @returns {Number} The luminance of `$color`.
@function color-luminance($color) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();

  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: divide($rgb, 255);

    $rgb: if($rgb < 0.03928, divide($rgb, 12.92), pow(divide($rgb + 0.055, 1.055), 2.4));

    $rgba2: append($rgba2, $rgb);
  }

  @return 0.2126 * nth($rgba2, 1) + 0.7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

// @debug color-luminance($blue);
// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
  $rgb: ("r": red($color), "g": green($color), "b": blue($color));

  @each $name, $value in $rgb {
    $value: if(divide($value, 255) < 0.03928, divide(divide($value, 255), 12.92), nth($_luminance-list, $value + 1));
    $rgb: map-merge($rgb, ($name: $value));
  }

  @return map-get($rgb, "r") * 0.2126 + map-get($rgb, "g") * 0.7152 + map-get($rgb, "b") * 0.0722;
}

/// Checks the contrast ratio of two colors.
///
/// @param {Color} $color1 - First color to compare.
/// @param {Color} $color2 - Second color to compare.
///
/// @returns {Number} The contrast ratio of the compared colors.
@function color-contrast-t($color1, $color2) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  $luminance1: color-luminance($color1) + 0.05;
  $luminance2: color-luminance($color2) + 0.05;
  $ratio: divide($luminance1, $luminance2);

  @if $luminance2 > $luminance1 {
    $ratio: divide(1, $ratio);
  }

  $ratio: round($ratio * 10) * 0.1;

  @return $ratio;
}

// @debug color-contrast-t($white, $black);

/// Checks the luminance of `$base`, and returns the color from `$colors` (list of colors) that has the most contrast.
///
/// @param {Color} $base - Color to check luminance.
/// @param {List} $colors [($white, $black)] - Colors to compare.
/// @param {Number} $tolerance [$global-color-pick-contrast-tolerance] - Contrast tolerance.
///
/// @returns {Color} the color from `$colors` (list of colors) that has the most contrast.
@function color-pick-contrast($base, $colors: [($white, $black)], $tolerance: $global-color-pick-contrast-tolerance) {
  $contrast: color-contrast-t($base, nth($colors, 1));
  $best: nth($colors, 1);

  @for $i from 2 through length($colors) {
    $current-contrast: color-contrast-t($base, nth($colors, $i));

    @if $current-contrast - $contrast > $tolerance {
      $contrast: color-contrast-t($base, nth($colors, $i));
      $best: nth($colors, $i);
    }
  }

  @if $contrast-warnings and $contrast < 3 {
    @warn "Contrast ratio of #{$best} on #{$base} is pretty bad, just #{$contrast}";
  }

  @return $best;
}

/// Scales a color to be darker if it's light, or lighter if it's dark. Use this function to tint a color appropriate to its lightness.
///
/// @param {Color} $color - Color to scale.
/// @param {Percentage} $scale [5%] - Amount to scale up or down.
/// @param {Percentage} $threshold [40%] - Threshold of lightness to check against.
///
/// @returns {Color} A scaled color.
@function luminance($color, $scale: 5%, $threshold: 40%) {
  @if lightness($color) > $threshold {
    $scale: -$scale;
  }

  @return scale-color($color, $lightness: $scale);
}

// Color yiq
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: ($r * 299 + $g * 587 + $b * 114) / 1000;

  @if $yiq >= $yiq-contrasted-threshold {
    @return $dark;
  }
  @else {
    @return $light;
  }
}

// A list of pre-calculated numbers of pow(divide((divide($value, 255) + .055), 1.055), 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern

@function color-contrast($background, $color-contrast-dark: $color-contrast-dark, $color-contrast-light: $color-contrast-light, $min-contrast-ratio: $min-contrast-ratio) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $dark;

  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);

    @if $contrast-ratio > $min-contrast-ratio {
      @return $color;
    }
    @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
  }

  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}...";

  @return $max-ratio-color;
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if($l1 > $l2, divide($l1 + 0.05, $l2 + 0.05), divide($l2 + 0.05, $l1 + 0.05));
}

// Return WCAG2.0 relative luminance
// See https://www.w3.org/WAI/GL/wiki/Relative_luminance
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
  $rgb: ("r": red($color), "g": green($color), "b": blue($color));

  @each $name, $value in $rgb {
    $value: if(divide($value, 255) < 0.03928, divide(divide($value, 255), 12.92), nth($_luminance-list, $value + 1));
    $rgb: map-merge($rgb, ($name: $value));
  }

  @return map-get($rgb, "r") * 0.2126 + map-get($rgb, "g") * 0.7152 + map-get($rgb, "b") * 0.0722;
}

// Return opaque color
// opaque(#fff, rgba($dark, .5)) => #808080
@function opaque($background, $foreground) {
  @return mix(rgba($foreground, 1), $background, opacity($foreground) * 100);
}

// scss-docs-start color-functions
// Tint a color: mix a color with white
@function tint-color($color, $weight) {
  @return mix($white, $color, $weight);
}

// Shade a color: mix a color with dark
@function shade-color($color, $weight) {
  @return mix($dark, $color, $weight);
}

// // Shade the color if the weight is positive, else tint it
@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}

// /////////////////////////////////
// // Calculate brightness value
// /////////////////////////////////

// @function brightness($color) {
//   @return (red($color) + green($color) + blue($color)) / (255 * 3);
// }

// /////////////////////////////////
// // Calculate brightness ratio
// // to base color
// /////////////////////////////////

// @function brightness_ratio($base, $color) {
//   @return abs(brightness($base) - brightness($color));
// }

// /////////////////////////////////
// // Compare colors to higher contrast
// /////////////////////////////////

// @function contrast($base, $color1: $white, $color2: $black) {
//   @return if(brightness_ratio($base, $color1) > brightness_ratio($base, $color2), $color1, $color2);
// }

// /////////////////////////////////
// // Compare colors to lower contrast 
// // (inverting the former contrast function)
// /////////////////////////////////

// @function invert-contrast($base, $color1: $white, $color2: $black) {
//   @return if(brightness_ratio($base, $color1) > brightness_ratio($base, $color2), $color2, $color1);
// }

/////////////////////////////////
//  text-contrast
// (inverting the former contrast function)
/////////////////////////////////
// .c000022{
//   background-color:#000022; 
//   @include text-contrast(#000022);}

@mixin text-contrast($n) {
  $color-brightness: round(red($n) * 299 + green($n) * 587 + blue($n) * 114 / 1000);
  $light-color: round(red($white) * 299 + green($white) * 587 + blue($white) * 114 / 1000);

  @if abs($color-brightness) < $light-color / 2 {
    color: $white;
  }
  @else {
    color: $black;
  }
}

/// Get color from foundation-palette
///
/// @param {key} color key from foundation-palette
///
/// @returns {Color} color from foundation-palette
@function get-color($key) {
  @if map-has-key($foundation-palette, $key) {
    @return map-get($foundation-palette, $key);
  }
  @else {
    @error "given $key is not available in $foundation-palette";
  }
}