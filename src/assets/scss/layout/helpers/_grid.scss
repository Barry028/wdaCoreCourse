@charset "utf-8";
//  Layout -> Grid 
// --------------------------------------------------

@if $enable-container-classes {
  // Single container class with breakpoint max-widths
  .container,
  .container-fluid {
    @include make-container;
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    @include media-breakpoint-only($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if $extend-breakpoint {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          // Once the current breakpoint is reached, stop extending
          @if $breakpoint == $name {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}

@if $enable-grid-classes {
  .row {
    @include make-row;

    > * {
      @include make-col-ready;
    }
  }
}

@if $enable-cssgrid {
  .grid {
    display: grid;
    grid-template-rows: repeat(var(--#{$prefix}rows, 1), 1fr);
    grid-template-columns: repeat(var(--#{$prefix}columns, #{$grid-columns}), 1fr);
    gap: var(--#{$prefix}gap, #{$grid-gutter-width});

    @include make-cssgrid;
  }
}

// Columns
//
// Common styles for small and large grid columns

// @if $enable-grid-classes {
//   @include make-grid-columns();
// }


// .container {
//   max-width: $container-xl;
//   @include container-fixed;

//   @media (max-width: $screen-lg-min) {
//     max-width: $container-lg;
//   }

//   @media (max-width: $screen-md-min) {
//     max-width: $container-md;
//   }

//   @media (max-width: $screen-sm-min) {
//     max-width: $container-sm;
//   }

//   @media (max-width: $screen-xs-min) {
//     max-width: $container-xs;
//   }
// }
// // Fluid container
// .container-fluid {
//   @include container-fixed;
// }
// // Row
// .row {
//   @include make-row;
// }

// @include make-grid(xl);

// // Large grid
// @media (max-width: $screen-lg-min) {
//   @include make-grid(lg);
// }
// // Medium grid
// @media (max-width: $screen-md-min) {
//   @include make-grid(md);
// }
// // Small grid
// @media (max-width: $screen-sm-min) {
//   @include make-grid(sm);
// }
// // Extra small grid
// @media (max-width: $screen-xs-min) {
//   @include make-grid(xs);
// }
// // Columns
// @include make-grid-columns;

@if $enable-grid-classes {
  @include make-grid-columns;
}

.clear-fix {
  @include clearfix;
}

@media (max-width: $screen-xl-min) {
  .clear-fix-xl {
    @include clearfix;
  }
}

@media (max-width: $screen-lg-min) {
  .clear-fix-lg {
    @include clearfix;
  }
}

@media (max-width: $screen-md-min) {
  .clear-fix-md {
    @include clearfix;
  }
}

@media (max-width: $screen-sm-min) {
  .clear-fix-sm {
    @include clearfix;
  }
}

@media (max-width: $screen-xs-min) {
  .clear-fix-xs {
    @include clearfix;
  }
}