//
//  Layout -> Grid 
// --------------------------------------------------

@if $enable-container-classes {
  // Single container class with breakpoint max-widths
  .container,
  .container-fluid {
    @include make-container;
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if $extend-breakpoint {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          // Once the current breakpoint is reached, stop extending
          @if $breakpoint == $name {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}

@if $enable-grid-classes {
  .row {
    @include make-row;

    > * {
      @include make-col-ready;
    }
  }
}

@if $enable-cssgrid {
  .grid {
    display: grid;
    grid-template-rows: repeat(var(--#{$prefix}rows, 1), 1fr);
    grid-template-columns: repeat(var(--#{$prefix}columns, #{$grid-columns}), 1fr);
    gap: var(--#{$prefix}gap, #{$grid-gutter-width});

    @include make-cssgrid;
  }
}

// Columns
//
// Common styles for small and large grid columns

// @if $enable-grid-classes {
//   @include make-grid-columns();
// }

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .flex#{$infix}-row {
      flex-direction: row !important;
    }

    .flex#{$infix}-column {
      flex-direction: column !important;
    }

    .flex#{$infix}-row-reverse {
      flex-direction: row-reverse !important;
    }

    .flex#{$infix}-column-reverse {
      flex-direction: column-reverse !important;
    }

    .flex#{$infix}-wrap {
      flex-wrap: wrap !important;
    }

    .flex#{$infix}-nowrap {
      flex-wrap: nowrap !important;
    }

    .flex#{$infix}-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }

    .justify-content#{$infix}-start {
      justify-content: flex-start !important;
    }

    .justify-content#{$infix}-end {
      justify-content: flex-end !important;
    }

    .justify-content#{$infix}-center {
      justify-content: center !important;
    }

    .justify-content#{$infix}-between {
      justify-content: space-between !important;
    }

    .justify-content#{$infix}-around {
      justify-content: space-around !important;
    }

    .align-items#{$infix}-start {
      align-items: flex-start !important;
    }

    .align-items#{$infix}-end {
      align-items: flex-end !important;
    }

    .align-items#{$infix}-center {
      align-items: center !important;
    }

    .align-items#{$infix}-baseline {
      align-items: baseline !important;
    }

    .align-items#{$infix}-stretch {
      align-items: stretch !important;
    }

    .align-content#{$infix}-start {
      align-content: flex-start !important;
    }

    .align-content#{$infix}-end {
      align-content: flex-end !important;
    }

    .align-content#{$infix}-center {
      align-content: center !important;
    }

    .align-content#{$infix}-between {
      align-content: space-between !important;
    }

    .align-content#{$infix}-around {
      align-content: space-around !important;
    }

    .align-content#{$infix}-stretch {
      align-content: stretch !important;
    }

    .align-self#{$infix}-auto {
      align-self: auto !important;
    }

    .align-self#{$infix}-start {
      align-self: flex-start !important;
    }

    .align-self#{$infix}-end {
      align-self: flex-end !important;
    }

    .align-self#{$infix}-center {
      align-self: center !important;
    }

    .align-self#{$infix}-baseline {
      align-self: baseline !important;
    }

    .align-self#{$infix}-stretch {
      align-self: stretch !important;
    }
  }
}

// .container {
//   max-width: $container-xl;
//   @include container-fixed;

//   @media (max-width: $screen-lg-min) {
//     max-width: $container-lg;
//   }

//   @media (max-width: $screen-md-min) {
//     max-width: $container-md;
//   }

//   @media (max-width: $screen-sm-min) {
//     max-width: $container-sm;
//   }

//   @media (max-width: $screen-xs-min) {
//     max-width: $container-xs;
//   }
// }
// // Fluid container
// .container-fluid {
//   @include container-fixed;
// }
// // Row
// .row {
//   @include make-row;
// }

// @include make-grid(xl);

// // Large grid
// @media (max-width: $screen-lg-min) {
//   @include make-grid(lg);
// }
// // Medium grid
// @media (max-width: $screen-md-min) {
//   @include make-grid(md);
// }
// // Small grid
// @media (max-width: $screen-sm-min) {
//   @include make-grid(sm);
// }
// // Extra small grid
// @media (max-width: $screen-xs-min) {
//   @include make-grid(xs);
// }
// // Columns
// @include make-grid-columns;

@if $enable-grid-classes {
  @include make-grid-columns;
}

.clear-fix {
  @include clearfix;
}

@media (max-width: $screen-xl-min) {
  .clear-fix-xl {
    @include clearfix;
  }
}

@media (max-width: $screen-lg-min) {
  .clear-fix-lg {
    @include clearfix;
  }
}

@media (max-width: $screen-md-min) {
  .clear-fix-md {
    @include clearfix;
  }
}

@media (max-width: $screen-sm-min) {
  .clear-fix-sm {
    @include clearfix;
  }
}

@media (max-width: $screen-xs-min) {
  .clear-fix-xs {
    @include clearfix;
  }
}