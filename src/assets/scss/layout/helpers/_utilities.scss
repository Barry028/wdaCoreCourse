//
//  Layout -> Utilities 
// --------------------------------------------------
@each $value in $floats {
  .t-float-#{$value} {
    float: $value !important;
  }

  %t-float-#{$value} {
    float: $value;
  }
}

@each $value in $vertical-aligns {
  .t-v-align-#{$value} {
    vertical-align: $value !important;
  }

  %t-v-align-#{$value} {
    vertical-align: $value;
  }
}

@each $value in $text-aligns {
  .t-txt-#{$value} {
    text-align: $value !important;
  }

  %t-txt-#{$value} {
    text-align: $value;
  }
}

@each $value in $user-selects {
  .t-select#{$value} {
    user-select: $value !important;
  }

  %t-select#{$value} {
    user-select: $value;
  }
}

@each $value in $positions {
  .t-#{$value} {
    position: $value !important;
  }

  %t-#{$value} {
    position: $value;
  }
}

@each $value in $overflows {
  .t-overflow-#{$value} {
    overflow: $value !important;
  }

  %t-overflow-#{$value} {
    overflow: $value;
  }
}

@each $value in $pointer-events {
  .t-pointer-even-#{$value} {
    pointer-events: $value !important;
  }

  %t-pointer-even-#{$value} {
    pointer-events: $value;
  }
}

@each $value in $word-wraps {
  .t-word-wrap-#{$value} {
    word-break: $value !important;
  }

  %t-word-wrap-#{$value} {
    word-break: $value;
  }
}

@each $value in $white-spaces {
  .t-white-space-#{$value} {
    white-space: $value !important;
  }

  %t-white-spaces-#{$value} {
    white-space: $value;
  }
}

@each $value in $cursors {
  .t-cursor-#{$value} {
    cursor: $value !important;
  }

  %t-cursor-#{$value} {
    cursor: $value;
  }
}



.t-text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.t-center-block {
  display: block !important;
  margin-right: auto !important;
  margin-left: auto !important;
}

.t-table-fixed {
  display: table !important;
  table-layout: fixed !important;
}

.t-in-bk-mid {
  @include in-bk-mid;
}

.t-tb-cell-mid {
  @include tb-cell-mid;
}

.t-visibility-visible {
  @include visually-visible
}

.t-visibility-hidden {
  @include visually-hidden
}

.content-space-1{
      padding-top: 3.5rem!important;
    padding-bottom: 3.5rem!important;
}
// .content-space-1{
//       padding-top: 3.5rem!important;
//     padding-bottom: 3.5rem!important;
// }



@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        .flex#{$infix}-root {
      flex: 1;
    }

        .flex#{$infix}-column-auto {
            flex: none;
        }

        .flex#{$infix}-column-fluid {
            flex: 1 0 auto;
        }

        .flex#{$infix}-row-auto {
            flex: 0 0 auto;
        }

        .flex#{$infix}-row-fluid {
            flex: 1 auto;
            min-width: 0;
        }

      .flex#{$infix}-center {
        justify-content: center;
        align-items: center;
      }

        .flex#{$infix}-stack {
      justify-content: space-between;
        align-items: center;
    }
    }
}

.flex-equal {
    flex-grow: 1;
    flex-basis: 0;
    flex-shrink: 0;
}



.flex-grow-0 {
  flex-grow: 0 !important;
}

.flex-grow-1 {
  flex-grow: 1 !important;
}

.flex-shrink-0 {
  flex-shrink: 0 !important;
}

.flex-shrink-1 {
  flex-shrink: 1 !important;
}

.flex-wrap {
  flex-wrap: wrap !important;
}

.flex-nowrap {
  flex-wrap: nowrap !important;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse !important;
}

.gap-0 {
  gap: 0 !important;
}

.gap-1 {
  gap: 0.25rem !important;
}

.gap-2 {
  gap: 0.5rem !important;
}

.gap-3 {
  gap: 0.75rem !important;
}

.gap-4 {
  gap: 1rem !important;
}

.gap-5 {
  gap: 1.25rem !important;
}

.gap-6 {
  gap: 1.5rem !important;
}

.gap-7 {
  gap: 1.75rem !important;
}

.gap-8 {
  gap: 2rem !important;
}

.gap-9 {
  gap: 2.25rem !important;
}

.gap-10 {
  gap: 2.5rem !important;
}

.gap-11 {
  gap: 2.75rem !important;
}

.gap-12 {
  gap: 3rem !important;
}

.gap-13 {
  gap: 3.25rem !important;
}

.gap-14 {
  gap: 3.5rem !important;
}

.gap-15 {
  gap: 3.75rem !important;
}

.gap-16 {
  gap: 4rem !important;
}

.gap-17 {
  gap: 4.25rem !important;
}

.gap-18 {
  gap: 4.5rem !important;
}

.gap-19 {
  gap: 4.75rem !important;
}

.gap-20 {
  gap: 5rem !important;
}

// // Utility generator
// // Used to generate utilities & print utilities
// @mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
//   $values: map-get($utility, values);

//   // If the values are a list or string, convert it into a map
//   @if type-of($values)=="string"or type-of(nth($values, 1)) !="list" {
//     $values: zip($values, $values);
//   }

//   @each $key,
//   $value in $values {
//     $properties: map-get($utility, property);

//     // Multiple properties are possible, for example with vertical or horizontal margins or paddings
//     @if type-of($properties)=="string" {
//       $properties: append((), $properties);
//     }

//     // Use custom class if present
//     $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
//     $property-class: if($property-class==null, "", $property-class);

//     // Use custom CSS variable name if present, otherwise default to `class`
//     $css-variable-name: if(map-has-key($utility, css-variable-name), map-get($utility, css-variable-name), map-get($utility, class));

//     // State params to generate pseudo-classes
//     $state: if(map-has-key($utility, state), map-get($utility, state), ());

//     $infix: if($property-class==""and str-slice($infix, 1, 1)=="-", str-slice($infix, 2), $infix);

//     // Don't prefix if value key is null (eg. with shadow class)
//     $property-class-modifier: if($key, if($property-class==""and $infix=="", "", "-") + $key, "");

//     @if map-get($utility, rfs) {

//       // Inside the media query
//       @if $is-rfs-media-query {
//         $val: rfs-value($value);

//         // Do not render anything if fluid and non fluid values are the same
//         $value: if($val==rfs-fluid-value($value), null, $val);
//       }

//       @else {
//         $value: rfs-fluid-value($value);
//       }
//     }

//     $is-css-var: map-get($utility, css-var);
//     $is-local-vars: map-get($utility, local-vars);
//     $is-rtl: map-get($utility, rtl);

//     @if $value !=null {
//       @if $is-rtl==false {
//         /* rtl:begin:remove */
//       }

//       @if $is-css-var {
//         .#{$property-class + $infix + $property-class-modifier} {
//           --#{$prefix}#{$css-variable-name}: #{$value};
//         }

//         @each $pseudo in $state {
//           .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
//             --#{$prefix}#{$css-variable-name}: #{$value};
//           }
//         }
//       }

//       @else {
//         .#{$property-class + $infix + $property-class-modifier} {
//           @each $property in $properties {
//             @if $is-local-vars {

//               @each $local-var,
//               $variable in $is-local-vars {
//                 --#{$prefix}#{$local-var}: #{$variable};
//               }
//             }

//             #{$property}: $value if($enable-important-utilities,  !important, null);
//           }
//         }

//         @each $pseudo in $state {
//           .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
//             @each $property in $properties {
//               @if $is-local-vars {

//                 @each $local-var,
//                 $variable in $is-local-vars {
//                   --#{$prefix}#{$local-var}: #{$variable};
//                 }
//               }

//               #{$property}: $value if($enable-important-utilities,  !important, null);
//             }
//           }
//         }
//       }

//       @if $is-rtl==false {
//         /* rtl:end:remove */
//       }
//     }
//   }
// }