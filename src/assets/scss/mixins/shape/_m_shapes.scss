@charset "utf-8";

//  Mixins > Shape
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––


$l: 20em;


@mixin rounded-hex($main-radius: 30%, $rounding-radius: 10%, $rotated: false, $precision: 20) {
  $n: 4;
  $central-angle: 360deg/$n;
  $angle: ($n - 2)*180deg/$n;
  $max-var-angle: 2*(90deg - $angle/2);
  $precision: 6;
  $unit-var-angle: $max-var-angle/$precision;

  $r-diff: $main-radius + $rounding-radius;

  $points: ();

  @for $i from 0 to $n {
    $vertex-angle: $i*$central-angle + if($rotated, -90deg, 0deg);
    $vertex-x: 50% + $r-diff*cos($vertex-angle);
    $vertex-y: 50% + $r-diff*sin($vertex-angle);

    @for $j from 0 through $precision {
      $curr-angle: $vertex-angle + ($j - .5*$precision)*$unit-var-angle;
      $x: $vertex-x + $rounding-radius*cos($curr-angle);
      $y: $vertex-y + $rounding-radius*sin($curr-angle);

      $points: $points, $x $y;
    }
  }

  clip-path: polygon($points);
}


// div {
//   display: inline-block;
//   width: $l; height: $l;
//   background: teal;
  
//   @include rounded-hex();
  
//   &:nth-child(2) {
//     @include rounded-hex($rotated: true);
//   }
//   &:nth-child(3) {
//     @include rounded-hex(
//       $main-radius: 5%, 
//       $rounding-radius: 20%
//     );
//   }
//   &:nth-child(4) {
//     @include rounded-hex(
//       $main-radius: 5%, 
//       $rounding-radius: 20%, 
//       $rotated: true
//     );
//   }
//   &:nth-child(5) {
//     @include rounded-hex(
//       $main-radius: 35%, 
//       $rounding-radius: 5%
//     );
//   }
//   &:nth-child(6) {
//     @include rounded-hex(
//       $main-radius: 35%, 
//       $rounding-radius: 5%, 
//       $rotated: true
//     );
//   }
//   &:nth-child(7) {
//     @include rounded-hex(
//       $main-radius: 35%, 
//       $rounding-radius: 0%
//     );
//   }
//   &:nth-child(8) {
//     @include rounded-hex(
//       $main-radius: 35%, 
//       $rounding-radius: 0%, 
//       $rotated: true
//     );
//   }
// }


@mixin shape($edges-number: 6, $main-radius: 30%, $rounding-radius: 10%, $rotated: true, $precision: 20) {
  $central-angle: divide(360deg, $edges-number);
  $angle: ($edges-number - 2) * divide(180deg, $edges-number);
  $max-var-angle: 2 * (90deg - divide($angle, 2));
  $precision: 6;
  $unit-var-angle: divide($max-var-angle, $precision);
  $r-diff: $main-radius + $rounding-radius;

  $points: ();

  @for $i from 0 to $edges-number {
    $vertex-angle: $i * $central-angle + if($rotated, -90deg, 0deg);
    $vertex-x: 50% + $r-diff * cos($vertex-angle);
    $vertex-y: 50% + $r-diff * sin($vertex-angle);

    @for $j from 0 through $precision {
      $curr-angle: $vertex-angle + ($j - 0.5 * $precision) * $unit-var-angle;
      $x: $vertex-x + $rounding-radius * cos($curr-angle);
      $y: $vertex-y + $rounding-radius * sin($curr-angle);

      $points: $points, $x $y;
    }
  }

  clip-path: polygon($points);
}


// $angle: The angle in degrees: 1 - 45
// $angle-position-y: The Y position of the angle: top | bottom | both
// $angle-position-x: The X position of the angle: left | right
// $angle-position-bottom-x: The X position of the bottom angle if using 'both' for $angle-position-y: left | right
// $fallback: Create a fallback for older browsers: true | false
// $fallback-color: Fallback colour for older browsers: Hex color

@mixin angle-edge($angle, $angle-position-y, $angle-position-x, $angle-position-bottom-x: '', $fallback: true, $fallback-color: #fff) {

  position: relative;
  overflow: hidden;

  // Converts degrees to VW, 100vw = 45deg using this technique
  @if $angle>45 {
    $angle: 0;
    @error 'Invalid angle, it must be between 1-45';
  }

  @if $angle < 46 {
    $angle: convertDegToVW($angle);
  }

  @if $angle-position-bottom-x=='' {
    $angle-position-bottom-x: $angle-position-x;
  }

  $angle-calc-top: calc(0% + #{$angle}vw);
  $angle-calc-bottom: calc(100% - #{$angle}vw);

  $clip-path-top: 0 0,
  100% 0;
  $clip-path-bottom: 100% 100%,
  0 100%;

  $border-width-top: '';
  $border-width-bottom: '';
  $border-color-top: '';
  $border-color-bottom: '';


  @if $angle-position-y=='top'or $angle-position-y=='both' {

    @if $angle-position-x=='left' {
      $clip-path-top: 0 $angle-calc-top, 100% 0;

      $border-width-top: #{$angle + 1}vw 100vw 0 0;
    }

    @if $angle-position-x=='right' {
      $clip-path-top: 0 0, 100% $angle-calc-top;

      $border-width-top: #{$angle + 1}vw 0 0 100vw;
    }

    $border-color-top: $fallback-color transparent transparent transparent;
  }


  @if $angle-position-y=='bottom'or $angle-position-y=='both' {

    @if $angle-position-y=='both'and $angle-position-x !=$angle-position-bottom-x {
      $angle-position-x: $angle-position-bottom-x;
    }

    @if $angle-position-x=='left' {
      $clip-path-bottom: 100% 100%, 0 $angle-calc-bottom;

      $border-width-bottom: 0 100vw #{$angle + 1}vw 0;
    }

    @if $angle-position-x=='right' {
      $clip-path-bottom: 100% $angle-calc-bottom, 0 100%;

      $border-width-bottom: 0 0 #{$angle + 1}vw 100vw;
    }

    $border-color-bottom: transparent transparent $fallback-color transparent;
  }

  $clip-path: polygon($clip-path-top, $clip-path-bottom);
  clip-path: $clip-path;


  // Fallback for clip-path with solid colours
  @if $fallback {

    @supports not (clip-path: $clip-path) {

      &::before,
      &::after {
        content: "";
        position: absolute;
        left: 0;
        z-index: 10;
        display: block;
        border-style: solid;
      }

      @if $angle-position-y=='top'or $angle-position-y=='both' {
        &::before {
          top: 0;
          border-width: $border-width-top;
          border-color: $border-color-top;
        }
      }

      @if $angle-position-y=='bottom'or $angle-position-y=='both' {
        &::after {
          bottom: 0;
          border-width: $border-width-bottom;
          border-color: $border-color-bottom;
        }
      }

    }

  }

}

// Converts degrees to VW, 100vw = 45deg using this technique
@function convertDegToVW($angle) {
  @return round($angle*2.22);
}