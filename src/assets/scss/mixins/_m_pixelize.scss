@charset "utf-8";

//  Mixins > Pixelize
// –––––––––––––––––––––––––––––––––––––––––––––––––––––––––



@mixin pixelize($size, $matrix, $colors, $default-color: null) {
  $ret: "";
  $moz: "";
  @if ($default-color == null) {
    // count number of each color in matrix and decide main color by highest count
    $matrix-colors: ();
    $counts: ();
    @each $row in $matrix {
      @each $item in $row {
        @if $item != 0 {
          $index: index($matrix-colors, $item);
          @if not $index {
            $matrix-colors: append($matrix-colors, $item);
            $counts: append($counts, 1);
          } @else {
            $count: nth($counts, $index) + 1;
            $counts: set-nth($counts, $index, $count);
          }
        }
      }
    }
    // use index of the highest count to get the corresponding matrix color
    $default-color: nth($colors, nth($matrix-colors, index($counts, max($counts...))));
  }

  @for $i from 1 through length($matrix) {
    $row: nth($matrix, $i);

    @for $j from 1 through length($row) {
      $dot: nth($row, $j);

      @if $dot != 0 {
        @if $ret != "" {
          $ret: $ret + ",";
          $moz: $moz + ",";
        }

        $color: nth($colors, $dot);
        @if $color == $default-color {
          $ret: $ret + ($j * $size) + " " + ($i * $size);
          $moz: $moz + ($j * $size) + " " + ($i * $size) + " 0 0.020em";
        } @else {
          $ret: $ret + ($j * $size) + " " + ($i * $size) + " " + $color;
          $moz: $moz + ($j * $size) + " " + ($i * $size) + " 0 0.020em " + $color;
        }
      }
    }
  }

  width: $size;
  height: $size;
  color: $default-color;
  box-shadow: unquote($ret);

  // firefox only style
  @supports (-moz-appearance: meterbar) {
    box-shadow: unquote($moz);
  }
}


// .nes-octocat {
//   $octocat-colors: (#333, #ffdec4, #cb7066);
//   // prettier-ignore
//   $octocat-1: (
//     (0,0,0,1,0,0,0,0,0,0,0,0,1,0),
//     (0,0,0,1,1,0,0,0,0,0,0,1,1,0),
//     (0,0,0,1,1,1,1,1,1,1,1,1,1,0),
//     (0,0,1,1,1,1,1,1,1,1,1,1,1,1),
//     (0,0,1,1,1,1,1,1,1,1,1,1,1,1),
//     (0,0,1,1,1,2,2,2,2,2,2,1,1,1),
//     (0,0,1,1,2,3,2,2,2,2,3,2,1,1),
//     (0,0,1,1,2,3,2,2,2,2,3,2,1,1),
//     (0,0,0,1,1,2,2,3,3,2,2,1,1,0),
//     (1,1,0,0,0,0,1,1,1,1,0,0,0,0),
//     (0,0,1,1,0,1,1,1,1,1,1,0,0,0),
//     (0,0,0,1,1,1,1,1,1,1,1,0,0,0),
//     (0,0,0,0,0,1,0,1,1,0,1,0,0,0),
//     (0,0,0,0,0,1,0,1,1,0,1,0,0,0),
//     (0,0,0,0,1,0,1,0,0,1,0,1,0,0)
//   );
//   // prettier-ignore
//   $octocat-2: (
//     (0,0,0,1,0,0,0,0,0,0,0,0,1,0),
//     (0,0,0,1,1,0,0,0,0,0,0,1,1,0),
//     (0,0,0,1,1,1,1,1,1,1,1,1,1,0),
//     (0,0,1,1,1,1,1,1,1,1,1,1,1,1),
//     (0,0,1,1,1,1,1,1,1,1,1,1,1,1),
//     (0,0,1,1,1,2,2,2,2,2,2,1,1,1),
//     (0,0,1,1,2,2,2,2,2,2,2,2,1,1),
//     (0,1,1,1,2,3,2,2,2,2,3,2,1,1),
//     (0,1,0,1,1,2,2,3,3,2,2,1,1,0),
//     (0,0,1,0,0,0,1,1,1,1,0,0,0,0),
//     (0,0,0,1,0,1,1,1,1,1,1,0,0,0),
//     (0,0,0,1,1,1,1,1,1,1,1,0,0,0),
//     (0,0,0,0,0,1,0,1,1,0,1,0,0,0),
//     (0,0,0,0,0,1,0,1,1,0,1,0,0,0),
//     (0,0,0,0,1,0,1,0,0,1,0,1,0,0)
//   );
//   $size: 6px;

//   position: relative;
//   display: inline-block;
//   width: $size * length(nth($octocat-1, 1));
//   height: $size * length($octocat-1);

//   &::before {
//     position: absolute;
//     top: -$size;
//     left: -$size;
//     content: "";
//     background: transparent;

//     @include pixelize($size, $octocat-1, $octocat-colors);
//   }

//   &.animate::before {
//     animation: wave 0.5s infinite steps(1);
//   }

//   @keyframes wave {
//     50% {
//       @include pixelize($size, $octocat-2, $octocat-colors);
//     }
//   }
// }
